


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             AsmTemplate, CODE, READONLY
    2 00000000                 IMPORT           main
    3 00000000         
    4 00000000                 EXPORT           start
    5 00000000         start
    6 00000000         
    7 00000000 E0028018 
                       IO1DIR  EQU              0xE0028018
    8 00000000 E0028014 
                       IO1SET  EQU              0xE0028014
    9 00000000 E002801C 
                       IO1CLR  EQU              0xE002801C
   10 00000000         
   11 00000000 E59F1134        LDR              r1, =IO1DIR
   12 00000004 E3A0280F        LDR              r2, =0x000f0000 ; Select P1.19-
                                                            -P1.16
   13 00000008 E5812000        str              r2, [r1]    ; Make them outputs
                                                            
   14 0000000C E59F112C        ldr              r1, =IO1SET
   15 00000010 E5812000        str              r2, [r1]    ; Set them to turn 
                                                            the LEDs off
   16 00000014 E59F2128        ldr              r2, =IO1CLR
   17 00000018         
   18 00000018         ; r1 points to the SET register
   19 00000018         ; r2 points to the CLEAR register
   20 00000018         
   21 00000018 E3A03000 
                       loop    ldr              r3, =0      ; Initial number
   22 0000001C E59F4124        ldr              r4, =nums   ; Magnitudes of 10
   23 00000020         
   24 00000020 E3A05102        ldr              r5, =0x80000000 ; Checks the MS
                                                            B of r5
   25 00000024 E0055003        AND              r5, r5, r3  ;   ; 
   26 00000028 E3550000        CMP              r5, #0x0    ; if (r5 == 0)    /
                                                            /If positive
   27 0000002C 1A000002        BNE              else1       ; {
   28 00000030 E3A0500A        ldr              r5, =0xA    ;   r5 = "+"
   29 00000034 E5AD5004        str              r5, [sp, #4]! ;   Memory.word[s
                                                            p] = r5; address = 
                                                            address + 4;
   30 00000038 EA000003        B                endif1      ; }
   31 0000003C         else1                                ; else {    //If ne
                                                            gative
   32 0000003C E3A0500B        ldr              r5, =0xB    ;   r5 = "-"
   33 00000040 E5AD5004        str              r5, [sp, #4]! ;   Memory.word[s
                                                            p] = r5; address = 
                                                            address + 4;
   34 00000044 E1E03003        MVN              r3, r3      ;   2's Compliment 
                                                            of
   35 00000048 E2833001        ADD              r3, r3, #0x1 ;      r3
   36 0000004C         endif1                               ; }
   37 0000004C         
   38 0000004C         
   39 0000004C         
   40 0000004C E4945004 
                       dowh1   ldr              r5, [r4], #4 ; do{  r5 = Memory
                                                            .word 
   41 00000050 E3A06000        ldr              r6, =0x0    ;   r6 = 0
   42 00000054 E0433005 



ARM Macro Assembler    Page 2 


                       dowh2   sub              r3, r3, r5  ;   do{  r3 = r3 - 
                                                            r5
   43 00000058 E2866001        add              r6, r6, #1  ;    r6 = r6 + 1
   44 0000005C E3530000        cmp              r3, #0      ;   } while (r3 > 0
                                                            )
   45 00000060 AAFFFFFB        bge              dowh2       ; 
   46 00000064 E0833005        add              r3, r3, r5  ;   r3 = r3 + r5
   47 00000068 E2466001        sub              r6, r6, #1  ;   r6 = r6 - 1
   48 0000006C E3560000        cmp              r6, #0x0    ;   if (r6 != 0) {
   49 00000070 1A000000        bne              endif2      ;     r6 = "1111" 
   50 00000074 E3A0600F        ldr              r6, =0xF    ;  }
   51 00000078 E5AD6004 
                       endif2  str              r6, [sp, #4]! ;  Memory.word[sp
                                                            ] = r6; address = a
                                                            ddress + 4;
   52 0000007C         
   53 0000007C E3550001        cmp              r5, #0x1    ; } while (r5 != 1)
                                                            
   54 00000080 1AFFFFF1        bne              dowh1       ;
   55 00000084 E3A06000        ldr              r6, =0x0    ; r6 = 0
   56 00000088 E5AD6004        str              r6, [sp, #4]! ; Memory.word[sp]
                                                             = r6; address = ad
                                                            dress + 4; // Termi
                                                            nation Condition
   57 0000008C E24DD02C        sub              sp, sp, #0x2C ; address = addre
                                                            ss - 40
   58 00000090         
   59 00000090         
   60 00000090         
   61 00000090 E3A05000        ldr              r5, =0x0    ; flag
   62 00000094 E49D3004 
                       dowh3   ldr              r3, [sp], #4 ;
   63 00000098 E353000F        cmp              r3, #0xF    ; if(x == 0)
   64 0000009C 1A000003        bne              else3       ;
   65 000000A0 E3550001        cmp              r5, #0x1    ; if(flag)
   66 000000A4 1A000000        bne              endif6      ; {
   67 000000A8 EB00000E        BL               sub1        ; printf(0)
   68 000000AC EA000009 
                       endif6  B                endif3      ; }
   69 000000B0         
   70 000000B0 E353000A 
                       else3   cmp              r3, #0xA    ; else if(x == +)
   71 000000B4 1A000001        bne              else4       ; {
   72 000000B8 EB00000A        BL               sub1        ; printf(+)
   73 000000BC EA000005        B                endif4      ;}
   74 000000C0         
   75 000000C0 E353000B 
                       else4   cmp              r3, #0xB    ; else if(x == -)
   76 000000C4 1A000001        bne              else5       ; {
   77 000000C8 EB000006        BL               sub1        ; prinf(-)
   78 000000CC EA000001        B                endif5      ; }
   79 000000D0         
   80 000000D0 E3A05001 
                       else5   ldr              r5, =0x1    ; else{ flag = true
                                                            ;
   81 000000D4 EB000003        BL               sub1        ; print(num) }
   82 000000D8         endif5
   83 000000D8         endif4
   84 000000D8         endif3



ARM Macro Assembler    Page 3 


   85 000000D8 E3560000        cmp              r6, #0x0    ; End of Sequence
   86 000000DC 1AFFFFEC        bne              dowh3
   87 000000E0 EAFFFFCC        b                loop        ; Loop Indefinitely
                                                             
   88 000000E4 EAFFFFFE 
                       stop    B                stop
   89 000000E8         
   90 000000E8         
   91 000000E8         
   92 000000E8         sub1
   93 000000E8 E3A06000        ldr              r6, =0x00000000
   94 000000EC E3A07601        ldr              r7, =0x00100000 
                                                            ; Start with P1.19
   95 000000F0 E3A08801        ldr              r8, =0x00010000 
                                                            ; End with P1.16
   96 000000F4         
   97 000000F4 E1A070A7 
                       dowh5   mov              r7, r7, LSR #1
   98 000000F8 E3A04000        ldr              r4, =0x0    ; do{  R4 = 0
   99 000000FC E1B030A3        movs             r3, r3, LSR #1 ;   R3 = R3/2
  100 00000100 E2A44000        adc              r4, r4, #0  ;   R4 = R4 + Carry
                                                            
  101 00000104 E3540001        cmp              r4, #0x1    ;   if (r4 == 1){
  102 00000108 1A000000        bne              endif7      ;    r6 = r6 + mask
                                                            
  103 0000010C E0866007        add              r6, r6, r7  ;    Shift down to 
                                                            the next bit. P1.19
                                                             -> P1.18 etc
  104 00000110         endif7                               ;   }
  105 00000110 E1570008        cmp              r7, r8      ; } while (P1.19 ->
                                                             P1.18 -> ... P1.16
                                                            )
  106 00000114 1AFFFFF6        bne              dowh5       ; 
  107 00000118         
  108 00000118 E5826000        str              r6, [r2]    ; Clear the bit -> 
                                                            turn on the LED
  109 0000011C         
  110 0000011C E59F4028        ldr              r4, =16000000
  111 00000120 E2544001 
                       dowh6   subs             r4, r4, #1  ; Delay for about a
                                                             second
  112 00000124 1AFFFFFD        bne              dowh6
  113 00000128         
  114 00000128 E5816000        str              r6, [r1]    ; Set the bit -> tu
                                                            rn off the LED
  115 0000012C         
  116 0000012C E59F4018        ldr              r4, =16000000
  117 00000130 E2544001 
                       dowh7   subs             r4, r4, #1  ; Delay for about a
                                                             second
  118 00000134 1AFFFFFD        bne              dowh7
  119 00000138 E12FFF1E        BX               lr
  120 0000013C         
  121 0000013C         
  122 0000013C         
  123 0000013C E0028018 
              E0028014 
              E002801C 
              00000000 



ARM Macro Assembler    Page 4 


              00F42400         AREA             mydata, DATA, READWRITE
  124 00000000         
  125 00000000 3B9ACA00 
              05F5E100 
              00989680 
              000F4240 nums    DCD              0x3B9ACA00, 0x05F5E100, 0x00989
680, 0x000F4240
  126 00000010 000186A0 
              00002710 
              000003E8 
              00000064         DCD              0x000186A0, 0x00002710, 0x00000
3E8, 0x00000064
  127 00000020 0000000A 
              00000001         DCD              0x0000000A, 0x00000001
  128 00000028                 END
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\a
pp.d -o.\app.o -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Ke
il_v5\ARM\INC\Philips --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 
1" --predefine="__UVISION_VERSION SETA 525" --list=.\listings\app.lst App.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

AsmTemplate 00000000

Symbol: AsmTemplate
   Definitions
      At line 1 in file App.s
   Uses
      None
Comment: AsmTemplate unused
dowh1 0000004C

Symbol: dowh1
   Definitions
      At line 40 in file App.s
   Uses
      At line 54 in file App.s
Comment: dowh1 used once
dowh2 00000054

Symbol: dowh2
   Definitions
      At line 42 in file App.s
   Uses
      At line 45 in file App.s
Comment: dowh2 used once
dowh3 00000094

Symbol: dowh3
   Definitions
      At line 62 in file App.s
   Uses
      At line 86 in file App.s
Comment: dowh3 used once
dowh5 000000F4

Symbol: dowh5
   Definitions
      At line 97 in file App.s
   Uses
      At line 106 in file App.s
Comment: dowh5 used once
dowh6 00000120

Symbol: dowh6
   Definitions
      At line 111 in file App.s
   Uses
      At line 112 in file App.s
Comment: dowh6 used once
dowh7 00000130

Symbol: dowh7
   Definitions
      At line 117 in file App.s
   Uses
      At line 118 in file App.s
Comment: dowh7 used once
else1 0000003C

Symbol: else1



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 31 in file App.s
   Uses
      At line 27 in file App.s
Comment: else1 used once
else3 000000B0

Symbol: else3
   Definitions
      At line 70 in file App.s
   Uses
      At line 64 in file App.s
Comment: else3 used once
else4 000000C0

Symbol: else4
   Definitions
      At line 75 in file App.s
   Uses
      At line 71 in file App.s
Comment: else4 used once
else5 000000D0

Symbol: else5
   Definitions
      At line 80 in file App.s
   Uses
      At line 76 in file App.s
Comment: else5 used once
endif1 0000004C

Symbol: endif1
   Definitions
      At line 36 in file App.s
   Uses
      At line 30 in file App.s
Comment: endif1 used once
endif2 00000078

Symbol: endif2
   Definitions
      At line 51 in file App.s
   Uses
      At line 49 in file App.s
Comment: endif2 used once
endif3 000000D8

Symbol: endif3
   Definitions
      At line 84 in file App.s
   Uses
      At line 68 in file App.s
Comment: endif3 used once
endif4 000000D8

Symbol: endif4
   Definitions
      At line 83 in file App.s
   Uses



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 73 in file App.s
Comment: endif4 used once
endif5 000000D8

Symbol: endif5
   Definitions
      At line 82 in file App.s
   Uses
      At line 78 in file App.s
Comment: endif5 used once
endif6 000000AC

Symbol: endif6
   Definitions
      At line 68 in file App.s
   Uses
      At line 66 in file App.s
Comment: endif6 used once
endif7 00000110

Symbol: endif7
   Definitions
      At line 104 in file App.s
   Uses
      At line 102 in file App.s
Comment: endif7 used once
loop 00000018

Symbol: loop
   Definitions
      At line 21 in file App.s
   Uses
      At line 87 in file App.s
Comment: loop used once
start 00000000

Symbol: start
   Definitions
      At line 5 in file App.s
   Uses
      At line 4 in file App.s
Comment: start used once
stop 000000E4

Symbol: stop
   Definitions
      At line 88 in file App.s
   Uses
      At line 88 in file App.s
Comment: stop used once
sub1 000000E8

Symbol: sub1
   Definitions
      At line 92 in file App.s
   Uses
      At line 67 in file App.s
      At line 72 in file App.s
      At line 77 in file App.s



ARM Macro Assembler    Page 4 Alphabetic symbol ordering
Relocatable symbols

      At line 81 in file App.s

22 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

mydata 00000000

Symbol: mydata
   Definitions
      At line 123 in file App.s
   Uses
      None
Comment: mydata unused
nums 00000000

Symbol: nums
   Definitions
      At line 125 in file App.s
   Uses
      At line 22 in file App.s
Comment: nums used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

IO1CLR E002801C

Symbol: IO1CLR
   Definitions
      At line 9 in file App.s
   Uses
      At line 16 in file App.s
Comment: IO1CLR used once
IO1DIR E0028018

Symbol: IO1DIR
   Definitions
      At line 7 in file App.s
   Uses
      At line 11 in file App.s
Comment: IO1DIR used once
IO1SET E0028014

Symbol: IO1SET
   Definitions
      At line 8 in file App.s
   Uses
      At line 14 in file App.s
Comment: IO1SET used once
3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

main 00000000

Symbol: main
   Definitions
      At line 2 in file App.s
   Uses
      None
Comment: main unused
1 symbol
363 symbols in table
